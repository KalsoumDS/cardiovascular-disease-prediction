import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
import matplotlib.pyplot as plt

st.set_page_config(page_title="Exploration des Donn√©es", page_icon="üìä")

st.title("Exploration et Analyse des Donn√©es")

try:
    # Chargement des donn√©es
    df = pd.read_csv('Base de donn√©e ML.csv')
    
    # Affichage des informations g√©n√©rales
    st.sidebar.header("Informations sur la Base de Donn√©es")
    st.sidebar.write(f"Nombre total d'observations : {len(df)}")
    st.sidebar.write(f"Nombre de variables : {len(df.columns)}")
    
    # S√©lection du type de visualisation
    viz_type = st.selectbox(
        "Type de Visualisation",
        ["Aper√ßu des Donn√©es", "Matrice de Corr√©lation", 
         "Distribution des Variables", "Analyse Bivari√©e", 
         "Analyse PCA"]
    )
    
    if viz_type == "Aper√ßu des Donn√©es":
        st.header("Aper√ßu des Donn√©es")
        st.write("Aper√ßu des 5 premi√®res lignes :")
        st.dataframe(df.head())
        st.write(f"Nombre total d'observations : {len(df)}")
        st.write("Statistiques descriptives :")
        st.dataframe(df.describe())
        
        # Ajout d'un histogramme de la distribution des classes
        st.subheader("Distribution des Classes")
        fig = px.histogram(df, x='target', 
                          title="Distribution des Classes dans la Base de Donn√©es",
                          labels={'target': 'Classe', 'count': 'Nombre d\'observations'})
        st.plotly_chart(fig, use_container_width=True)
        
        # Interpr√©tation de la distribution des classes
        st.subheader("Interpr√©tation de la Distribution des Classes")
        st.markdown("""
La distribution des classes est √©quilibr√©e, ce qui est favorable pour l'apprentissage automatique et l'√©valuation des mod√®les.
""")
    
    elif viz_type == "Matrice de Corr√©lation":
        st.header("Matrice de Corr√©lation")
        corr = df.corr()
        fig = px.imshow(corr, 
                       title="Matrice de Corr√©lation entre les Variables",
                       color_continuous_scale='RdBu',
                       aspect='auto')
        st.plotly_chart(fig, use_container_width=True)
        
        # Interpr√©tation sp√©cifique de la matrice de corr√©lation
        st.subheader("Interpr√©tation sp√©cifique de la matrice de corr√©lation")
        st.markdown("""
- La matrice montre que la plupart des variables sont peu corr√©l√©es entre elles (hors diagonale), ce qui est positif pour l'apprentissage automatique.
- Aucune paire de variables ne pr√©sente de corr√©lation tr√®s forte (proche de 1 ou -1), donc chaque variable apporte une information sp√©cifique.
- Par exemple, l'√¢ge n'est pas fortement corr√©l√© avec les autres variables, ce qui sugg√®re une influence ind√©pendante.
- La variable cible (`target`) n'est pas fortement corr√©l√©e √† une seule variable, ce qui montre que le risque est multifactoriel.
""")
    
    elif viz_type == "Distribution des Variables":
        st.header("Distribution des Variables")
        
        col1, col2 = st.columns(2)
        with col1:
            variable = st.selectbox(
                "S√©lectionnez une variable",
                df.select_dtypes(include=['float64', 'int64']).columns
            )
        with col2:
            plot_type = st.selectbox(
                "Type de graphique",
                ["Histogramme", "Box Plot", "Violin Plot"]
            )
        
        if plot_type == "Histogramme":
            fig = px.histogram(df, x=variable, color='target',
                             title=f"Distribution de {variable} par Classe",
                             marginal="box",
                             nbins=50)
        elif plot_type == "Box Plot":
            fig = px.box(df, x='target', y=variable,
                        title=f"Box Plot de {variable} par Classe")
        else:
            fig = px.violin(df, x='target', y=variable,
                          title=f"Violin Plot de {variable} par Classe")
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Ajout des statistiques descriptives pour la variable s√©lectionn√©e
        st.subheader(f"Statistiques pour {variable}")
        st.dataframe(df.groupby('target')[variable].describe())
        
        # Interpr√©tation sp√©cifique de la variable s√©lectionn√©e
        st.subheader("Interpr√©tation sp√©cifique de la variable s√©lectionn√©e")
        if variable == "sex":
            st.markdown("""
- La majorit√© des individus sont des hommes (1), mais la maladie touche les deux sexes.
- La proportion de cas de maladie semble similaire dans les deux groupes, mais il faudrait regarder les pourcentages pour conclure.
""")
        elif variable == "age":
            st.markdown("""
- La distribution de l'√¢ge est similaire pour les deux classes.
- Il n'y a pas de tranche d'√¢ge o√π la maladie est nettement plus fr√©quente.
""")
        else:
            st.markdown("""
- Cette variable ne pr√©sente pas de diff√©rence flagrante entre les classes, mais peut contribuer √† la pr√©diction en combinaison avec d'autres variables.
""")
    
    elif viz_type == "Analyse Bivari√©e":
        st.header("Analyse Bivari√©e")
        
        col1, col2 = st.columns(2)
        with col1:
            x_var = st.selectbox(
                "Variable X",
                df.select_dtypes(include=['float64', 'int64']).columns
            )
        with col2:
            y_var = st.selectbox(
                "Variable Y",
                df.select_dtypes(include=['float64', 'int64']).columns
            )
        
        fig = px.scatter(df, x=x_var, y=y_var, color='target',
                        title=f"Relation entre {x_var} et {y_var}",
                        opacity=0.6)
        st.plotly_chart(fig, use_container_width=True)
        
        # Calcul et affichage de la corr√©lation
        correlation = df[x_var].corr(df[y_var])
        st.write(f"Corr√©lation entre {x_var} et {y_var} : {correlation:.3f}")
        
        # Interpr√©tation sp√©cifique de l'analyse bivari√©e
        st.subheader("Interpr√©tation sp√©cifique de l'analyse bivari√©e")
        st.markdown(f"""
- Le nuage de points montre une grande dispersion, sans tendance lin√©aire claire.
- Les deux classes sont m√©lang√©es, ce qui indique que la combinaison de {x_var} et {y_var} ne suffit pas √† s√©parer les classes.
""")
    
    else:  # Analyse PCA
        st.header("Analyse en Composantes Principales")
        
        try:
            # Chargement des r√©sultats PCA
            pca_results = pd.read_csv('pca_results.csv')
            
            # Visualisation de la variance expliqu√©e
            fig = px.line(x=range(1, len(pca_results) + 1),
                         y=pca_results['Variance Expliqu√©e'],
                         title="Variance Expliqu√©e par les Composantes Principales")
            fig.update_layout(xaxis_title="Nombre de Composantes",
                            yaxis_title="Variance Expliqu√©e")
            st.plotly_chart(fig, use_container_width=True)
            
            # Visualisation des deux premi√®res composantes
            fig = px.scatter(pca_results, x='PC1', y='PC2', color='target',
                            title="Projection sur les Deux Premi√®res Composantes Principales",
                            opacity=0.6)
            st.plotly_chart(fig, use_container_width=True)
            
            # Interpr√©tation de l'analyse PCA
            st.subheader("Interpr√©tation de l'Analyse PCA")
            st.markdown("""
            ### Analyse des Composantes Principales :
            
            1. **Variance Expliqu√©e**
               - La courbe montre la quantit√© d'information conserv√©e
               - Le coude (elbow) indique le nombre optimal de composantes
               - La variance cumul√©e montre la perte d'information
            
            2. **Projection 2D**
               - Les clusters visibles indiquent des groupes naturels
               - La s√©paration des classes montre la qualit√© de la r√©duction
               - Les outliers peuvent √™tre identifi√©s
            
            3. **Points d'Attention**
               - La perte d'information doit √™tre √©valu√©e
               - L'interpr√©tabilit√© des composantes est importante
               - La qualit√© de la s√©paration des classes doit √™tre consid√©r√©e
            """)
            
        except FileNotFoundError:
            st.warning("Veuillez d'abord ex√©cuter l'analyse PCA pour voir les r√©sultats.")

except FileNotFoundError:
    st.error("Veuillez d'abord ex√©cuter le script de pr√©traitement pour voir les visualisations.") 